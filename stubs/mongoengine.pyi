from typing import Type, Any, Optional, TypeVar, List, Union, overload, Iterator
from mongoengine import ComplexBaseField

T = TypeVar('T', bound='Document')

class BaseField:
	def __init__(self, *args: Any, **kwargs: Any) -> None: ...
 
class ComplexBaseField(BaseField):
	def __init__(self, *args: Any, **kwargs: Any) -> None: ...
	def __get__(self, instance: Any, owner: Any) -> Any: ...
	def __set__(self, instance: Any, value: Any) -> None: ...
	def __delete__(self, instance: Any) -> None: ...


class StringField(BaseField): ...
class IntField(BaseField): ...
class BooleanField(BaseField): ...
class EmbeddedDocumentField(BaseField): ...
class DateTimeField(BaseField): ...
class FloatField(BaseField): ...

class ReferenceField(BaseField):
    def __init__(self, document_type: Type["Document"], *args: Any, **kwargs: Any) -> None: ...
    def __get__(self, instance: Any, owner: Any) -> Optional["Document"]: ...

class ListField(ComplexBaseField): ...
    
class ValidationError(Exception):
	def __init__(self, message: str) -> None: ...

class QuerySet(List[T]):
	def first(self) -> Optional[T]: ...
	def get(self, *args: Any, **kwargs: Any) -> T: ...
	def filter(self, *args: Any, **kwargs: Any) -> 'QuerySet[T]': ...
	def exclude(self, *args: Any, **kwargs: Any) -> 'QuerySet[T]': ...
	def order_by(self, *args: Any) -> 'QuerySet[T]': ...
	def limit(self, n: int) -> 'QuerySet[T]': ...
	def all(self) -> 'QuerySet[T]': ...
	@overload
	def count(self) -> int: ...
	@overload
	def count(self, value) -> int: ...
	def update(self, **kwargs: Any) -> int: ...
	def delete(self) -> int: ...
	def __len__(self) -> int: ...

class Document:
	id: Optional[Union[str, int]]  # id is set after saving

	def __init__(self, *args: Any, **kwargs: Any) -> None: ...
	@classmethod
	def objects(cls: Type[T], **filters: Any) -> QuerySet[T]: ...  # Support dynamic field filtering
	def save(self) -> None: ...
	def delete(self) -> None: ...
	def update(self, **kwargs: Any) -> None: ...
	def validate(self) -> None: ...
	def to_json(self) -> str: ...
	def clean(self) -> None: ...
	@classmethod
	def from_json(cls: Type[T], json_data: str) -> T: ...

# Connection methods
def connect(**kwargs: Any) -> None: ...
def disconnect() -> None: ...
